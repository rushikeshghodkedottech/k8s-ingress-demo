name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  WELCOME_IMAGE_NAME: rushikeshghodkedottech/welcome-web
  HELLO_IMAGE_NAME: rushikeshghodkedottech/hello-web

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata for welcome-web
      id: meta-welcome
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.WELCOME_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push welcome-web image
      uses: docker/build-push-action@v5
      with:
        context: ./welcome
        push: true
        tags: ${{ steps.meta-welcome.outputs.tags }}
        labels: ${{ steps.meta-welcome.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for hello-web
      id: meta-hello
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.HELLO_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push hello-web image
      uses: docker/build-push-action@v5
      with:
        context: ./web
        push: true
        tags: ${{ steps.meta-hello.outputs.tags }}
        labels: ${{ steps.meta-hello.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-local:
    needs: build-and-test
    runs-on: self-hosted  # This will run on your local machine
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      run: |
        # Verify kubectl is installed and configured
        kubectl version --client
        kubectl cluster-info

    - name: Update image tags in deployments
      run: |
        # Get the short SHA for tagging
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        
        # Update welcome-web deployment
        sed -i "s|image: rushikeshghodkedottech/welcome-web.*|image: rushikeshghodkedottech/welcome-web:main-${{ github.sha }}|g" welcome/deployment.yaml
        
        # Update hello-web deployment  
        sed -i "s|image: rushikeshghodkedottech/hello-web.*|image: rushikeshghodkedottech/hello-web:main-${{ github.sha }}|g" web/deployment.yaml

    - name: Deploy to Kubernetes
      run: |
        # Apply all deployments and services
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml
        kubectl apply -f welcome/deployment.yaml
        kubectl apply -f welcome/service.yaml
        kubectl apply -f web/deployment.yaml
        kubectl apply -f web/service.yaml
        
        # Apply ingress
        kubectl apply -f ingress.yaml
        
        # Wait for deployments to be ready
        kubectl rollout status deployment/nginx-deployment --timeout=300s
        kubectl rollout status deployment/welcome-web-deployment --timeout=300s
        kubectl rollout status deployment/hello-web-deployment --timeout=300s

    - name: Verify deployment
      run: |
        echo "=== Deployment Status ==="
        kubectl get deployments
        echo ""
        echo "=== Service Status ==="
        kubectl get services
        echo ""
        echo "=== Pod Status ==="
        kubectl get pods
        echo ""
        echo "=== Ingress Status ==="
        kubectl get ingress

  cleanup-on-failure:
    needs: [build-and-test, deploy-to-local]
    runs-on: self-hosted
    if: failure()
    
    steps:
    - name: Rollback deployment
      run: |
        echo "Deployment failed, initiating rollback..."
        kubectl rollout undo deployment/nginx-deployment || true
        kubectl rollout undo deployment/welcome-web-deployment || true
        kubectl rollout undo deployment/hello-web-deployment || true
